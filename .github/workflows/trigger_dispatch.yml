name: Trigger Read Access Dispatch

on:
  issues:
    types: [opened, labeled]

jobs:
  dispatch-event:
    runs-on: ubuntu-latest
    steps:
      - name: Check for ISSUE_NUMBER
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          if [[ -z "$ISSUE_NUMBER" ]]; then
            echo "Error: ISSUE_NUMBER is not set."
            exit 1
          else
            echo "ISSUE_NUMBER is set to $ISSUE_NUMBER"
          fi

      - name: Retrieve Username from Issue
        run: |
          set -e
          echo "Fetching issue details for ISSUE_NUMBER: $ISSUE_NUMBER"
          ISSUE_DETAILS=$(gh issue view $ISSUE_NUMBER --repo "$GITHUB_REPOSITORY" --json author)
          echo "Issue Details: $ISSUE_DETAILS"
          
          USERNAME=$(echo "$ISSUE_DETAILS" | jq -r '.author.login')
          echo "Username: $USERNAME"
  
          if [[ -z "$USERNAME" ]]; then
            echo "Error: Username is empty."
            exit 1
          fi
          
          echo "Username: $USERNAME";
          
          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}

      # - name: Dispatch event
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     USERNAME: ${{ env.USERNAME }}
      #   run: |
      #     RESPONSE=$(gh api -X POST repos/Fresh-Eyes-on-CMIP/discussions/actions/workflows/new_member.yml/dispatches --input - <<EOF
      #     {
      #       "event_type": "read-access",
      #       "client_payload": {
      #         "username": "$USERNAME"
      #       }
      #     }
      #     EOF
      #     )
      #     if [[ $? -eq 0 ]]; then
      #       echo "Dispatch event triggered successfully."
      #       echo "SUCCESS=true" >> $GITHUB_ENV
      #     else
      #       echo "Error triggering dispatch event:"
      #       echo "$RESPONSE"
      #       echo "SUCCESS=false" >> $GITHUB_ENV
      #       exit 1
      #     fi

      - name: Add user
        env:
          GH_TOKEN: ${{ github.token }}
          USERNAME: ${{ env.USERNAME }}
        run: |
          echo "/repos/Fresh-Eyes-on-CMIP/discussions/collaborators/${{USERNAME}} "

          curl -L \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.CMIPIPO}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/Fresh-Eyes-on-CMIP/discussions/collaborators/${{USERNAME}} \
          -d '{"permission":"read"}'
          
          # gh api \
          # --method PUT \
          # -H "Accept: application/vnd.github+json" \
          # -H "X-GitHub-Api-Version: 2022-11-28" \
          # /repos/Fresh-Eyes-on-CMIP/discussions/collaborators/${USERNAME} \
          # -f permission=read
          
      - name: Close Issue on Success
        if: env.SUCCESS == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          gh issue close $ISSUE_NUMBER --repo $REPO --comment "Read access granted."
      
      - name: Comment on Issue on Failure
        if: env.SUCCESS == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
          ERROR_MESSAGE: ${{ env.ERROR_MESSAGE }}
        run: |
          gh issue comment $ISSUE_NUMBER --repo $REPO --body "Error triggering dispatch event:\n\`\`\`\n$ERROR_MESSAGE\n\`\`\`"
